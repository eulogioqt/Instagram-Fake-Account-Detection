# Análisis exploratorio de datos

El análisis exploratorio de datos es una etapa crucial en cualquier proyecto de análisis de datos o modelado predictivo. Consiste en explorar y comprender los datos disponibles antes de aplicar cualquier técnica de modelado o inferencia. El objetivo principal del análisis exploratorio de datos es revelar patrones, tendencias, anomalías y relaciones dentro de los datos, lo que proporciona una base sólida para la toma de decisiones y la construcción de modelos.

```{r, message=FALSE, warning=FALSE}
library(dplyr)
library(ggplot2)
library(tidyr)
library(corrplot)
library(psych)
library(gridExtra)
```

En esta sección nos centraremos en explorar la estructura de los datos disponibles y entender la distribución y características de las variables. En el siguiente apartado, nos adentraremos en la visualización de datos para comprender mejor cómo se distribuyen y relacionan las diferentes variables.

```{r}
dataset <- read.csv("datasets/train.csv")
```

## Exploración inicial del dataset

Vamos a comenzar viendo los aspectos más generales de nuestro dataset, que involucren toda la información, luego nos centraremos en aspectos más concretos.

### Estructura del dataset

```{r}
str(dataset)
```

Vemos que contamos con 576 observaciones, es decir, 576 cuentas de Instagram con su clasificación y 12 variables que son precisamente los datos que tenemos de estas cuentas.

Inicialmente podemos ver que todas nuestras variables son númericas, ya sean números enteros o decimales. Para el análisis de datos esto es un plus, pues los números son más manejables para la mayoría de técnicas de análisis de datos.

### Valores NA

```{r}
sapply(dataset, function(x) sum(is.na(x)))
```

Sorprendentemente no hay valores nulos, en los datasets suele haber columnas con valores NA con los que debemos tener cuidado, pero en nuestro caso, no tenemos ninguno, lo que de nuevo, nos facilitará el trabajo a lo largo de este libro.

### Resumen estadístico

```{r}
summary(dataset)
```

Observamos que hay algunas variables binarias, otras con pocos valores y otras con un rango amplio. Vamos a usar las funciones apply para entrar un poco más en profundidad.

```{r}
minimums <- sapply(dataset, min)
maximums <- sapply(dataset, max)
unique_values <- sapply(dataset, function(x) length(unique(x)))

dataset_values <- data.frame(
  min=minimums,
  max=maximums,
  unique_values=unique_values
)

dataset_values
```

Identificamos fácilmente que hay 5 variables binarias, 3 no binarias con menos de 100 valores distintos y el resto con 100 o más valores distintos. Estas variables son:

```{r}
binary_vars <- rownames(dataset_values %>% filter(unique_values == 2))
```

```{r, echo=FALSE}
cat("Variables binarias son:", paste(binary_vars, collapse =", "), "\n")
```

```{r}
mid_vars <- rownames(dataset_values %>% filter(unique_values > 2 & unique_values < 100))
```

```{r, echo=FALSE}
cat("Variables con entre 2 y 100:", paste(mid_vars, collapse =", "), "\n")
```

```{r}
big_vars <- rownames(dataset_values %>% filter(unique_values >= 100))
```

```{r, echo=FALSE}
cat("Variables con 100 o más:", paste(big_vars, collapse =", "), "\n")
```

## Gráfico de pares

Vamos a visualizar el panel de pares de variables, que nos da información de la relación entre cada par de variables.

```{r}
pairs.panels(dataset, main="Gráfico de pares")
```

Es un poco díficil observar algo ya que tenemos 12 variables y los gráficos se ven muy pequeños. Vamos a observar la matriz de correlación.

## Matriz de correlación

La matriz de correlación nos muestra la correlación entre cada par de variables. Sea M la matriz de correlación y sea (i, j) una posición de la matriz, entonces, la posición M\[i, j\] es la correlación entre las variables i y j.

```{r}
cor_matrix <- cor(dataset)
cor_matrix
```

Aquí podemos buscar cualquier par de variables y ver su correlación. Buscando un poco vemos correlaciones significativas entre profile.pic y fake, la description.length y external.URL

Como hay muchos numeros y no es lo más riguroso buscar a ojo, vamos a hacer unos pequeños cálculos para encontrar todas las variables relacionadas más de un cierto `threshold`.

```{r}
threshold <- 0.4

cor_table <- data.frame(as.table(cor_matrix)) %>% 
  rename(Correlation = Freq)

variables <- colnames(dataset)
n_variables <- length(dataset)
medium_point <- n_variables / 2

# Para que no haya repeticiones simétricas, vamos a poner la restricción de que el 
# orden léxicográfico de una variable sea mayor (o menor) que la otra. 
# Con un != no valdría porque habría valores filas simétricas
cor_table %>% 
  filter(as.character(Var1) > as.character(Var2) & abs(Correlation) > threshold) %>%
  arrange(desc(abs(Correlation)))
```

Ahora podemos sacar más información que la que habíamos visto de primeras. Hay una importante correlación entre si una cuenta es falsa y si tiene foto de perfil, el ratio de carácteres númericos en el nombre de la cuenta, la longitud de la descripción...

A conitnuación vamos a pasar a un análsis más concreto, para observar en particular cada variable de nuestro dataset.

## Variables binarias

Las variables binarias solo toman dos valores (en nuestro caso todas 0 o 1) y la información que se puede extraer es distinta que el resto. Vamos a comenzar con ellas, como sabemos por nuestro análisis anterior, estás son `profile.pic`, `name..username`, `external.URL` y `private` y `fake`. Vamos a comenzar con fake ya que es la más relevante, pues es la clasificación de cada fila del dataset.

### fake

Toma el valor 1 si la cuenta es falsa, y 0 si no es falsa. Es la variable más importante que tenemos en el dataset, pues es la que tratamos de estimar, de la que queremos a partir de las otras, extraer información para poder predecir esta.

```{r}
table(dataset$fake)
```

Tenemos un 50 - 50 de clasificaciones, mitad de cuentas son falsas y la otra mitad no.

```{r}
summary(dataset$fake)
```

La media y la mediana corroboran lo que comentabamos antes.

En resumen:

```{r}
total_count <- length(dataset$fake)
count_fake <- sum(dataset$fake == 1)
count_real <- sum(dataset$fake == 0)
percent_fake <- (count_fake / total_count) * 100
percent_real <- (count_real / total_count) * 100

paste0("Cuentas falsas: ", count_fake, " (", round(percent_fake, 2), "%)")
paste0("Cuentas no falsas: ", count_real, " (", round(percent_real, 2), "%)")
```

### profile.pic

Toma el valor 1 para las cuentas con foto de perfil y un 0 para las que no tienen.

```{r}
summary(dataset$profile.pic)
```

La media ya nos indica que en nuestro dataset hay más cuentas con foto de perfil que sin foto.

En resumen:

```{r, echo=FALSE}
total_count <- length(dataset$profile.pic)
count_with_pic <- sum(dataset$profile.pic == 1)
count_without_pic <- sum(dataset$profile.pic == 0)
percent_with_pic <- (count_with_pic / total_count) * 100
percent_without_pic <- (count_without_pic / total_count) * 100

paste0("Cuentas con foto de perfil: ", count_with_pic, " (", round(percent_with_pic, 2), "%)")
paste0("Cuentas sin foto de perfil: ", count_without_pic, " (", round(percent_without_pic, 2), "%)")
```

### name..username

Toma el valor 1 si el nombre de la persona es igual al username que se ha puesto en Instagram, y 0 en caso contrario.

```{r}
summary(dataset$name..username)
```

La media nos indica que muy pocas cuentas cumplen esta condición.

```{r}
total_count <- length(dataset$name..username)
count_name_equals_username <- sum(dataset$name..username == 1)
count_name_not_equals_username <- sum(dataset$name..username == 0)
percent_name_equals_username <- (count_name_equals_username / total_count) * 100
percent_name_not_equals_username <- (count_name_not_equals_username / total_count) * 100

paste0("Cuentas con mismo nombre y username: ", count_name_equals_username, " (", round(percent_name_equals_username, 2), "%)")
paste0("Cuentas con distinto nombre y username: ", count_name_not_equals_username, " (", round(percent_name_not_equals_username, 2), "%)")
```

### external.URL

Toma el valor 1 si la cuenta tiene un enlace en el perfil, y 0 si no tiene.

```{r}
summary(dataset$external.URL)
```

La mediana es 0 y la media 0.11. Pocas cuentas tienen enlace en el perfil.

```{r}
total_count <- length(dataset$external.URL)
count_with_url <- sum(dataset$external.URL == 1)
count_without_url <- sum(dataset$external.URL == 0)
percent_with_url <- (count_with_url / total_count) * 100
percent_without_url <- (count_without_url / total_count) * 100

paste0("Cuentas con enlace en el perfil: ", count_with_url, " (", round(percent_with_url, 2), "%)")
paste0("Cuentas sin enlace en el perfil: ", count_without_url, " (", round(percent_without_url, 2), "%)")
```

### private

Toma el valor 1 si la cuenta es privada, y 0 si es pública.

```{r}
summary(dataset$private)
```

```{r}
total_count <- length(dataset$private)
count_private <- sum(dataset$private == 1)
count_public <- sum(dataset$private == 0)
percent_private <- (count_private / total_count) * 100
percent_public <- (count_public / total_count) * 100

paste0("Cuentas privadas: ", count_private, " (", round(percent_private, 2), "%)")
paste0("Cuentas públicas: ", count_public, " (", round(percent_public, 2), "%)")
```

## Variables no binarias

Las variables no binarias tienen más información que podemos explorar, las binarias simplemente podíamos ver como se repartían los datos y no mucho más.

Las variables no binarias son:

```{r}
non_binary <- dataset_values %>%
  filter(unique_values > 2) %>%
  arrange(unique_values)

non_binary
```

Salvo `fullname.words`, todas las variables tienen un alto número de valores únicos. Vamos a empezar con esta ya que podremos hacer algún que otro gráfico distinto al resto, y seguiremos el orden ascendente del número de valores únicos.

### fullname.words

Representa el número de palabras en el nombre completo del usuario.

```{r}
str(dataset$fullname.words)
```

Vemos que toma valores enteros.

```{r}
summary(dataset$fullname.words)
```

La media es alrededor de la palabra y media, lo que tiene bastante sentido. Sin embargo, la mediana es tener una sola palabra para el nombre.

```{r}
table(dataset$fullname.words)
```

Tenemos bastantes cuentas sin palabras en el nombre completo, lo que es sospechoso.

¿Qué tipo de cuenta tiene más de 1, 2, 3 o como mucho 4 palabras en su nombre completo? Es tan sospechoso como tener 0.

```{r}
total_count <- nrow(dataset)

count_one_word <- sum(dataset$fullname.words == 1)
percent_one_word <- (count_one_word / total_count) * 100

count_multi_word <- sum(dataset$fullname.words > 1)
percent_multi_word <- (count_multi_word / total_count) * 100

count_no_word <- sum(dataset$fullname.words == 0)
percent_no_word <- (count_no_word / total_count) * 100

# Mostrar resultados
paste0("Cuentas sin nombre completo: ", count_no_word, " (", round(percent_no_word, 2), "%)")
paste0("Cuentas con nombre completo de una palabra: ", count_one_word, " (", round(percent_one_word, 2), "%)")
paste0("Cuentas con nombre de más de una palabra: ", count_multi_word, " (", round(percent_multi_word, 2), "%)")
```

### nums.length.fullname

Ratio del número de carácteres númericos en el nombre completo respecto a la longitud del nombre completo.

```{r}
str(dataset$nums.length.fullname)
```

```{r}
table(dataset$nums.length.fullname)
```

Tenemos una gran concentración en el número 0 y vemos que la variable toma valores entre 0 y 1, de forma continua.

```{r}
summary(dataset$nums.length.fullname)
```

Lo normal es no tener carácteres en el nombre completo (recordamos que es el nombre de la persona, no el username).

```{r}
total_count <- nrow(dataset)

count_with_numbers <- sum(dataset$nums.length.fullname > 0)
percent_with_numbers <- (count_with_numbers / total_count) * 100

count_no_numbers <- sum(dataset$nums.length.fullname == 0)
percent_no_numbers <- (count_no_numbers / total_count) * 100

paste0("Cuentas con números en el nombre completo: ", 
       count_with_numbers, " (", round(percent_with_numbers, 2), "%)")
paste0("Cuentas sin números en el nombre completo: ", 
       count_no_numbers, " (", round(percent_no_numbers, 2), "%)")
```

### nums.length.username

Ratio del número de carácteres númericos en el nombre de usuario respecto a la longitud del nombre de usuario.

Muy parecido a la variable anterior, pero esta vez es respecto al nombre de usuario de Instagram. Probablemente haya ciertas diferencias como que será más común tener algún número en el username.

```{r}
str(dataset$nums.length.username)
```

Toma valores entre 0 y 1, como la variable anterior.

```{r}
summary(dataset$nums.length.username)
```

Se observa justamente lo que hemos comentado, es más común tener algún número en el username, respecto a los números en el nombre completo de la persona.

```{r}
total_count <- nrow(dataset)

count_with_numbers <- sum(dataset$nums.length.username > 0)
percent_with_numbers <- (count_with_numbers / total_count) * 100

count_no_numbers <- sum(dataset$nums.length.username == 0)
percent_no_numbers <- (count_no_numbers / total_count) * 100

paste0("Cuentas con números en el nombre completo: ", 
       count_with_numbers, " (", round(percent_with_numbers, 2), "%)")
paste0("Cuentas sin números en el nombre completo: ", 
       count_no_numbers, " (", round(percent_no_numbers, 2), "%)")
```

Prácticamente la mitad de usuarios tiene algún número en el nombre de usuario, mientras que en nombre completo, pocos tenían.

### description.length

La longitud de la descripción de la cuenta de Instagram.

```{r}
str(dataset$description.length)
```

Toma valores enteros, como es lógico por el significado de la variable.

```{r}
summary(dataset$description.length)
```

La media es de unos 23 carácteres en la descripción, pero probablemente esté muy afectado por las cuentas sin descripción, ya que la mediana es 0.

```{r}
count_with_description <- sum(dataset$description.length > 0)
percent_with_description <- (count_with_description / total_count) * 100

count_no_description <- sum(dataset$description.length == 0)
percent_no_description <- (count_no_description / total_count) * 100

paste0("Cuentas con descripción: ", 
       count_with_description, " (", round(percent_with_description, 2), "%)")
paste0("Cuentas sin descripción: ", 
       count_no_description, " (", round(percent_no_description, 2), "%)")
```

Hay más cuentas sin descripción que con descripción. Vamos a calcular la media sin tener en cuenta todas esas cuentas que no tienen descripción:

```{r}
cuentas_con_descripcion = dataset %>%
  filter(description.length > 0)

paste0("La media de carácteres en la descripción es: ", mean(cuentas_con_descripcion$description.length))
```

### X.posts

Representa el número de publicaciones que tiene una cuenta de Instagram.

```{r}
str(dataset$X.posts)
```

De nuevo, valores enteros.

```{r}
summary(dataset$X.posts)
```

En este caso no pasa como con la descripción que la mediana era directamente 0, pero de nuevo vemos que la media es muy alta y la mediana muy baja.

```{r}
count_with_posts <- sum(dataset$X.posts > 0)
count_no_posts <- sum(dataset$X.posts == 0)

percent_with_posts <- (count_with_posts / total_count) * 100
percent_no_posts <- (count_no_posts / total_count) * 100

paste0("Cuentas con publicaciones: ", count_with_posts, " (", round(percent_with_posts, 2), "%)")
paste0("Cuentas sin publicaciones: ", count_no_posts, " (", round(percent_no_posts, 2), "%)")
```

Tenemos muchas cuentas sin publicaciones teniendo en cuenta que Instagram se usa principalmente para publicar...

Vamos a ver la media de publicaciones quitando las cuentas sin publicaciones y los outliers que tienen más de 1000 publicaciones:

```{r}
cuentas_menos_1000_posts <- dataset %>%
  filter(X.posts > 0 & X.posts <= 1000)

paste0("Media: ", round(mean(cuentas_menos_1000_posts$X.posts), 2))
```

### X.followers

Representa el número de seguidores que tiene una cuenta de Instagram.

```{r}
str(dataset$X.followers)
```

```{r}
summary(dataset$X.followers)
```

Volvemos a tener una media mucho más alta que la mediana. Esta variable tiene un rango de valores muy disperso.

```{r}
cuentas_con_seguidores <- sum(dataset$X.followers > 0)
cuentas_sin_seguidores <- sum(dataset$X.followers == 0)

percent_con_seguidores <- (cuentas_con_seguidores / total_count) * 100
percent_sin_seguidores <- (cuentas_sin_seguidores / total_count) * 100

paste0("Cuentas con seguidores: ", cuentas_con_seguidores, " (", round(percent_con_seguidores, 2), "%)")
paste0("Cuentas sin seguidores: ", cuentas_sin_seguidores, " (", round(percent_sin_seguidores, 2), "%)")
```

Observamos que hay muy pocas cuentas sin seguidores.

Vamos a ver la media de seguidores quitando las cuentas sin seguidores y las cuentas que tienen más de 10000 seguidores.

```{r}
cuentas_filtradas_seguidores <- dataset %>%
  filter(X.followers > 0 & X.followers <= 10000)

paste0("Media: ", round(mean(cuentas_filtradas_seguidores$X.followers), 2))
```

### X.follows

Representa el número de personas que sigue una cuenta de Instagram.

```{r}
str(dataset$X.follows)
```

```{r}
summary(dataset$X.follows)
```

En este caso la media y la mediana no están tan alejadas como en los otros casos.

```{r}
cuentas_con_seguidos <- sum(dataset$X.followers > 0)
cuentas_sin_seguidos <- sum(dataset$X.followers == 0)

percent_con_seguidos <- (cuentas_con_seguidores / total_count) * 100
percent_sin_seguidos <- (cuentas_sin_seguidores / total_count) * 100

paste0("Cuentas con seguidos: ", cuentas_con_seguidos, " (", round(percent_con_seguidos, 2), "%)")
paste0("Cuentas sin seguidos: ", cuentas_sin_seguidos, " (", round(percent_sin_seguidos, 2), "%)")
```

Observamos que hay muy pocas cuentas sin seguidos. Vamos a ver si las cuentas que no siguen a nadie son las mismas que tampoco tienen seguidores:

```{r}
cuentas_sin_seguidos_ni_seguidores <- dataset %>% 
  filter(X.followers == 0 & X.follows == 0)

nrow(cuentas_sin_seguidos_ni_seguidores)
```

Pues resulta ser que no, solo hay 3 cuentas que no tienen ni seguidores ni seguidos.

## Relaciones entre variables

Matriz de correlación entre variables binarias y no binarias

```{r}
cor_bin_nonbin <- cor(dataset[, c(binary_vars, rownames(non_binary))])
corrplot(cor_bin_nonbin, method="circle", type="upper", tl.col="black", tl.srt=45)
```

Estadísticas descriptivas comparativas entre cuentas falsas y reales

```{r}
fake_stats <- sapply(dataset[dataset$fake == 1, rownames(non_binary)], 
                     function(x) c(round(mean(x), 2), median(x), round(sd(x), 2)))
real_stats <- sapply(dataset[dataset$fake == 0, rownames(non_binary)], 
                     function(x) c(round(mean(x), 2), median(x), round(sd(x), 2)))

comparison_stats <- data.frame(Fake = fake_stats, Real = real_stats)
rownames(comparison_stats) <- c("Media", "Mediana", "Desviación típica")
t(comparison_stats)
```

La tabla proporciona una comparación entre las estadísticas descriptivas de las cuentas falsas y reales en Instagram.

Observamos que, en promedio, las cuentas falsas tienden a tener menos palabras en el nombre completo y una longitud de descripción más corta en comparación con las cuentas reales.

Además, las cuentas falsas muestran un número significativamente menor de seguidores y personas seguidas en comparación con las cuentas reales, como indican las medias y medianas mucho más bajas en estas variables.

Por otro lado, las diferencias en las desviaciones estándar sugieren una mayor variabilidad en el número de seguidores y personas seguidas para las cuentas reales en comparación con las falsas.

## Cuestiones generales

Vamos a explorar una serie de cuestiones generales acerca de nuestros datos, para entender mejor como se distribuyen nuestros datos y explorar relaciones interesantes:

-   **¿Cuál es la proporción de perfiles privados con foto de perfil?**

```{r}
prop.table(table(
  ifelse(dataset$private == 1, "Privada", "Publica"), 
  ifelse(dataset$profile.pic == 1, "Con foto", "Sin foto")))
```

Lo más común es tener una cuenta pública y con foto

-   **¿Cuál es la media de seguidores de los perfiles falsos frente a los públicos?**

```{r}
medias <- dataset %>% 
  group_by(fake) %>% 
  summarise(mean(X.followers))

data.frame(
  Perfil=c("Real", "Falso"),
  "Media de seguidores"=medias$`mean(X.followers)`)
```

-   **¿Existe una correlación entre la longitud de la descripción y la cantidad de seguidores?**

```{r}
cor(as.numeric(dataset$description.length), as.numeric(dataset$X.followers))
```

Parece ser que no.

-   **¿Cuál es la media del número de publicaciones según si el perfil es privado o no?**

```{r}
medias <- dataset %>% 
  group_by(private) %>% 
  summarise(mean(X.posts))

data.frame(
  Cuenta=c("Pública", "Privada"),
  "Media de publicaciones"=medias$`mean(X.posts)`)
```

-   **¿Cuál es la proporción de perfiles con más de 1000 seguidores falsos frente a los reales?**

```{r}
table(dataset$fake, 
      dataset$X.followers > 1000) / rowSums(table(dataset$fake, 
                                                  dataset$X.followers > 1000))
```

El 98.26% de las cuentas falsas tienen menos de 1000 seguidores. El 35.7% de las cuentas reales tienen más de 1000 seguidores.

-   **¿Qué porentaje de cuentas tienen números en el nombre real, en función de perfiles falsos y reales?**

```{r}
medias <- dataset %>% 
  mutate(has.nums.fullname=as.numeric(nums.length.fullname > 0)) %>%
  group_by(fake) %>% 
  summarise(mean(has.nums.fullname))

data.frame(
  Cuenta=c("Real", "Falso"),
  "Media del ratio de números en el nombre real"=medias$`mean(has.nums.fullname)`)
```

El 2% de las cuentas reales tienen números en su nombre real mientras que el 17% de las cuentas falsas tienen números en el nombre real. Claramente tener números en el nombre real es algo sospechoso.

-   **¿Cuáles son las cuentas falsas con más seguidores?**

```{r}
seguidores_fake <- dataset %>%
  filter(fake == 1) %>%
  select(X.followers, fake) %>%
  arrange(desc(X.followers))

head(seguidores_fake)
```

No hay ninguna cuenta falsa con más de 3033 seguidores.

-   **¿Cuántas cuentas reales tienen más seguidores que la cuenta falsa con más seguidores?**

```{r}
seguidores_real <- dataset %>%
  filter(fake == 0 & X.followers > seguidores_fake$X.followers[1]) %>%
  select(X.followers, fake) %>%
  arrange(desc(X.followers))

head(seguidores_real)
paste0("Hay ", nrow(seguidores_real), " cuentas reales con más de ", seguidores_fake$X.followers[1], " seguidores")
```

Interesante, el 9% del dataset se podría directamente clasificar como cuenta real, al tener más seguidores que la cuenta falsa con más seguidores.

## Conclusiones

Con este análisis exploratorio hemos podido entender mejor la naturaleza de nuestros datos, entendiendo mejor la distribución de los mismos y pudiendo ver las primeras relaciones entre distintas variables.

El carácter númerico de nuestros datos nos permitirá que técnicas como la regresión lineal nos puedan dar buenos resultados, además de que, como hemos visto, hay ciertas relaciones clave entre distintas variables que podremos explotar.

Un buen análisis exploratorio es muy importante y puede marcar el desarrollo del estudio de nuestros datos. Hemos obtenido un conocimiento inicial que nos vendrá muy bien cuando comencemos a aplicar las primeras técnicas de análisis de datos.

En el siguiente apratado, visualización de datos, vamos a visualizar algunos de los puntos que hemos tratado en este análisis exploratorio, para poder hacernos un modelo mental aún más cercano a los datos.
